# -*- coding: utf-8 -*-
"""cluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j_NEoAiwxoJhih64V6Qjt2DsVkljdPRg
"""

import torch
import os
from transformers import AutoImageProcessor, AutoModel
from PIL import Image
from sklearn.cluster import KMeans
import numpy as np

# Function to load images from a folder
def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        try:
            img = Image.open(img_path).convert("RGB")
            images.append(img)
        except IOError:
            pass  # You can handle errors here if you want
    return images

# Image folder path
image_folder = '/content/data'

# Load images
images = load_images_from_folder(image_folder)

# Initialize the processor and model
processor = AutoImageProcessor.from_pretrained('facebook/dinov2-base')
model = AutoModel.from_pretrained('facebook/dinov2-base')
model.config.return_dict = False

# Feature extraction
features = []
for image in images:
    inputs = processor(images=image, return_tensors="pt")
    with torch.no_grad():
        outputs = model(**inputs)
    # Flatten the tensor to 1D and convert to numpy
    features.append(outputs[0].squeeze().view(-1).numpy())

# Convert list of features to a 2D array
features_array = np.array(features)

# Clustering with K-MEANS++
n_clusters = 5  # Define the number of clusters
kmeans = KMeans(n_clusters=n_clusters, init='k-means++')
kmeans.fit(features_array)

# The cluster assignment for each image
clusters = kmeans.labels_

print("Cluster assignments:", clusters)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

# Dimensionality Reduction using t-SNE
n_samples = len(features_array)
perplexity_value = min(30, n_samples - 1)  # Ensure perplexity is less than the number of samples

tsne = TSNE(n_components=2, verbose=1, perplexity=perplexity_value, n_iter=300)
tsne_results = tsne.fit_transform(features_array)

# Visualization
plt.figure(figsize=(16,10))
scatter = plt.scatter(tsne_results[:,0], tsne_results[:,1], c=clusters, cmap='viridis')
plt.title('t-SNE visualization of image clusters')
plt.colorbar(scatter)
plt.show()

# Sort images by cluster assignment
sorted_indices = np.argsort(clusters)
sorted_images = [images[idx] for idx in sorted_indices]
sorted_clusters = clusters[sorted_indices]

# Get the count of images in each cluster
cluster_counts = np.bincount(sorted_clusters)

# Create a figure with subplots
fig, axes = plt.subplots(max(cluster_counts), len(np.unique(clusters)), figsize=(20, 10), squeeze=False)

# Plot each cluster in its column
for cluster_num in np.unique(sorted_clusters):
    cluster_indices = np.where(sorted_clusters == cluster_num)[0]
    for idx, img_idx in enumerate(cluster_indices):
        ax = axes[idx, cluster_num]
        ax.imshow(sorted_images[img_idx])
        ax.axis('off')
    for idx in range(len(cluster_indices), max(cluster_counts)):
        axes[idx, cluster_num].axis('off')

# Optionally, add a title to each column
for cluster_num in np.unique(sorted_clusters):
    axes[0, cluster_num].set_title(f'Cluster {cluster_num}')

plt.tight_layout()
plt.show()