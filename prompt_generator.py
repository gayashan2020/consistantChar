# -*- coding: utf-8 -*-
"""prompt generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R472qElYIeBI6wlQ2u-QSjyXAa9uvCeG
"""

import random

subjects = ["cat", "dog", "elephant", "dragon", "tree"]
adjectives = ["highly-detailed", "trending on artstation", "rendered in Unreal Engine", "4k", "8k"]
art_forms = ["photography", "oil painting", "watercolor painting", "charcoal sketch", "vector illustration", "CCTV still"]
styles = ["van gogh", "andy warhol", "picasso", "max mustermann"]
numbers = ["", "two ", "three ", "a dozen "]

def generate_prompt():
    subject = random.choice(subjects)
    adjective = random.choice(adjectives)
    art_form = random.choice(art_forms)
    style = random.choice(styles)
    number = random.choice(numbers)

    prompt = f"{art_form} of {number}{subject} by {style}, {adjective}"

    return prompt

generate_prompt()

import random
# Define lists of keywords for each category
subjects = ["Elven ranger in a deep forest", "Dwarven warrior in a dark cave", "Dragon soaring above a mountain peak", "Wizard casting a powerful spell in an ancient library"]
mediums = ["hand-drawn illustration", "digital rendering", "watercolor painting", "ink sketch"]
styles = ["fantasy realism", "comic book style", "gothic", "concept art style"]
artists = ["Keith Parkinson", "Todd Lockwood", "Larry Elmore", "Clyde Caldwell"]
websites = ["Artstation", "Deviant Art", "D&D Beyond", "Wizards of the Coast"]
resolutions = ["highly detailed", "bold outlines", "intricate patterns", "stylized abstraction"]
additional_details = ["ancient ruins in the background", "battle-worn equipment", "mythic aura", "magical runes glowing"]
colors = ["earthy tones", "mystical blues", "fiery reds", "shadowy greys"]
lighting = ["torchlight flickering", "moonlight filtering through trees", "sunrise over a castle", "magical glow illuminating"]


def generate_prompt():
    # Randomly select one keyword from each category
    subject = random.choice(subjects)
    medium = random.choice(mediums)
    style = random.choice(styles)
    artist = random.choice(artists)
    website = random.choice(websites)
    resolution = random.choice(resolutions)
    additional_detail = random.choice(additional_details)
    color = random.choice(colors)
    light = random.choice(lighting)

    # Create the prompt by concatenating the keywords
    prompt = f"{subject}, {medium}, {style}, by {artist}, from {website}, {resolution}, {additional_detail}, {color}, {light}"

    return prompt
# Generate a prompt and print it
prompt = generate_prompt()
prompt

!pip install trankit
!pip install flair
!pip install spacy
!python -m spacy download en_core_web_sm

import spacy
import random
from google.colab import files

# Initialize NER model
nlp = spacy.load('en_core_web_sm')

def extract_entities(text):
    # Extract entities with spacy
    spacy_entities = [(ent.text, ent.label_) for ent in nlp(text).ents]

    # Group entities by type
    entities_by_type = {}
    for entity, type in spacy_entities:
        if type not in entities_by_type:
            entities_by_type[type] = []
        entities_by_type[type].append(entity)

    # Select a random entity of each type
    selected_entities = {type: random.choice(entities) for type, entities in entities_by_type.items()}

    return selected_entities

def generate_prompt_from_paragraph(paragraph):
    entities = extract_entities(paragraph)

    subject = entities.get('PERSON', 'subject')
    art_form = entities.get('WORK_OF_ART', 'art form')
    location = entities.get('GPE', 'location')
    org = entities.get('ORG', 'organization')
    product = entities.get('PRODUCT', 'product')

    prompt = f"{art_form} of {subject} by {org}, set in {location}, inspired by {product}"

    return prompt

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

# Read the uploaded file
with open(list(uploaded.keys())[0], 'r', encoding='ISO-8859-1') as file:
    paragraph = file.read()

generate_prompt_from_paragraph(paragraph)

!pip install python-docx

import spacy
import random
from collections import defaultdict
from docx import Document

# Initialize NER model
nlp = spacy.load('en_core_web_sm')

def extract_entities(text):
    # Extract entities with spacy
    spacy_entities = [(ent.text, ent.label_) for ent in nlp(text).ents]

    # Group entities by type
    entities_by_type = {}
    for entity, type in spacy_entities:
        if type not in entities_by_type:
            entities_by_type[type] = []
        entities_by_type[type].append(entity)

    # Select a random entity of each type
    selected_entities = {type: random.choice(entities) for type, entities in entities_by_type.items()}

    return selected_entities

def generate_prompt_from_paragraph(paragraph):
    entities = extract_entities(paragraph)

    subject = entities.get('PERSON')
    art_form = entities.get('WORK_OF_ART')
    location = entities.get('GPE')
    org = entities.get('ORG')
    product = entities.get('PRODUCT')

    # Check if all entities are present
    if None in [subject, location]:
        return None

    prompt = f"digital art of {subject} by wlop, set in {location}, highly-detailed, trending on artstation"

    return prompt

# Load the Word file
doc = Document('/content/CURSE OF STRAHD.docx')

# A dictionary to hold paragraphs based on styles
style_based_paragraphs = defaultdict(list)

# Loop through all paragraphs in the document
for paragraph in doc.paragraphs:
    # Loop through all runs in the paragraph
    for run in paragraph.runs:
        style_based_paragraphs['Regular'].append(paragraph.text)

# Generate and print a prompt for each 10-paragraph block
for style, paragraphs in style_based_paragraphs.items():
    for i in range(0, len(paragraphs), 10):
        combined_paragraph = ' '.join(paragraphs[i:i+10])
        prompt = generate_prompt_from_paragraph(combined_paragraph)
        if prompt is not None:
            print(f'Prompt for {style} Paragraphs {i + 1} - {i + 10}: {prompt}\n')